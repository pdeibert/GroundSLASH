// ----------
// Based on the latest ASP-Core 2 standard.
// For details see https://www.cambridge.org/core/journals/theory-and-practice-of-logic-programming/article/abs/aspcore2-input-language-format/292E52334010C1F62E4469ABCD66228E.
//
// Credit to https://github.com/asp-core2-parser/ASP-Core2.0c-parser/blob/master/Lark%20Prototype/proto.py for a lot of helpful cues
// ----------

// ----- parser rules -----

program             :   statements
                    |   query
                    |   statements query

statements          :   statements statement
                    |   statement

query               :   classical_literal QUERY_MARK

statement           :   CONS body DOT
                    |   CONS DOT
                    |   head CONS DOT
                    |   head CONS body DOT
                    |   head DOT

head                :   disjunction
                    |   choice
                    |   npp_declaration

body                :   naf_literal
                    |   aggregate
                    |   NAF aggregate
                    |   body COMMA naf_literal
                    |   body COMMA aggregate
                    |   body COMMA NAF aggregate

disjunction         :   disjunction OR classical_literal
                    |   classical_literal

choice              :   CURLY_OPEN choice_elements CURLY_CLOSE relop term
                    |   CURLY_OPEN CURLY_CLOSE relop term
                    |   CURLY_OPEN CURLY_CLOSE
                    |   CURLY_OPEN choice_elements CURLY_CLOSE
                    |   term relop CURLY_OPEN choice_elements CURLY_CLOSE
                    |   term relop CURLY_OPEN CURLY_CLOSE relop term
                    |   term relop CURLY_OPEN CURLY_CLOSE
                    |   term relop CURLY_OPEN choice_elements CURLY_CLOSE relop term

choice_elements     :   choice_elements SEMICOLON choice_element
                    |   choice_element

choice_element      :   classical_literal COLON naf_literals
                    |   classical_literal COLON
                    |   classical_literal

aggregate           :   aggregate_function CURLY_OPEN aggregate_elements CURLY_CLOSE relop term
                    |   aggregate_function CURLY_OPEN CURLY_CLOSE relop term
                    |   aggregate_function CURLY_OPEN CURLY_CLOSE
                    |   aggregate_function CURLY_OPEN aggregate_elements CURLY_CLOSE
                    |   term relop aggregate_function CURLY_OPEN aggregate_elements CURLY_CLOSE
                    |   term relop aggregate_function CURLY_OPEN CURLY_CLOSE relop term
                    |   term relop aggregate_function CURLY_OPEN CURLY_CLOSE
                    |   term relop aggregate_function CURLY_OPEN aggregate_elements CURLY_CLOSE relop term

aggregate_elements  :   aggregate_elements SEMICOLON aggregate_element
                    |   aggregate_element

aggregate_element   :   terms COLON naf_literals
                    |   terms
                    |   terms COLON
                    |   COLON
                    |   COLON naf_literals

aggregate_function  :   COUNT
                    |   MAX
                    |   MIN
                    |   SUM

naf_literals        :   naf_literals COMMA naf_literal 
                    |   naf_literal

naf_literal         :   classical_literal
                    |   NAF classical_literal
                    |   builtin_atom

classical_literal   :   ID
                    |   ID PAREN_OPEN PAREN_CLOSE
                    |   ID PAREN_OPEN terms PAREN_CLOSE
                    |   MINUS ID
                    |   MINUS ID PAREN_OPEN PAREN_CLOSE
                    |   MINUS ID PAREN_OPEN terms PAREN_CLOSE

builtin_atom        :   term relop term

relop               :   EQUAL
                    |   UNEQUAL
                    |   LESS
                    |   GREATER
                    |   LESS_OR_EQ
                    |   GREATER_OR_EQ

terms               :   terms COMMA term
                    |   term

term                :   term_sum

term_sum            :   term_sum PLUS term_prod
                    |   term_sum MINUS term_prod
                    |   term_prod

term_prod           :   term_prod TIMES term_atom
                    |   term_prod DIV term_atom
                    |   term_atom

term_atom           :   NUMBER
                    |   STRING
                    |   VARIABLE
                    |   ANONYMOUS_VARIABLE
                    |   PAREN_OPEN term_sum PAREN_CLOSE
                    |   MINUS term_sum
                    |   symbolic_term

symbolic_term       :   ID PAREN_OPEN terms PAREN_CLOSE
                    |   ID PAREN_OPEN PAREN_CLOSE
                    |   ID

npp_declaration     :   NPP PAREN_OPEN ID PAREN_OPEN terms PAREN_CLOSE COMMA SQUARE_OPEN terms SQUARE_CLOSE PAREN_CLOSE
                    |   NPP PAREN_OPEN ID PAREN_OPEN PAREN_CLOSE COMMA SQUARE_OPEN terms SQUARE_CLOSE PAREN_CLOSE
                    |   NPP PAREN_OPEN ID PAREN_OPEN PAREN_CLOSE COMMA SQUARE_OPEN SQUARE_CLOSE PAREN_CLOSE
                    |   NPP PAREN_OPEN ID COMMA SQUARE_OPEN terms SQUARE_CLOSE PAREN_CLOSE
                    |   NPP PAREN_OPEN ID COMMA SQUARE_OPEN SQUARE_CLOSE PAREN_CLOSE

// ----- lexer rules -----

NAF                 :   "not" // define before ID to have precedence
ID                  :   /[a-z]\w*/
VARIABLE            :   /[A-Z]\w*/
STRING              :   /\"(\\\"|[^\"])*\"/
NUMBER              :   /(0|[1-9]\d*)/
ANONYMOUS_VARIABLE  :   "_"
DOT                 :   "."
COMMA               :   ","
QUERY_MARK          :   "?"
COLON               :   ":"
SEMICOLON           :   ";"
OR                  :   "|"
CONS                :   ":-"
WCONS               :   ":~"
PLUS                :   "+"
MINUS               :   "-"
TIMES               :   "*"
DIV                 :   "/"
AT                  :   "@"
PAREN_OPEN          :   "("
PAREN_CLOSE         :   ")"
SQUARE_OPEN         :   "["
SQUARE_CLOSE        :   "]"
CURLY_OPEN          :   "{"
CURLY_CLOSE         :   "}"
EQUAL               :   "="
UNEQUAL             :   "!="
LESS                :   "<"
GREATER             :   ">"
LESS_OR_EQ          :   "<="
GREATER_OR_EQ       :   ">="
COUNT               :   "#count"
MAX                 :   "#max"
MIN                 :   "#min"
SUM                 :   "#sum"
NPP                 :   "#npp"
COMMENT             :   /%[^\r\n]*/
MULTI_LINE_COMMENT  :   /%\*(\*(?!%)|[^*])*\*%/

%import common.WS

%ignore WS
%ignore COMMENT
%ignore MULTI_LINE_COMMENT